name: "Create Infrastructure Branch Based Deployment"

on:
  workflow_dispatch:
    inputs:
      brand_name:
        type: choice
        description: "Select the brand name"
        options:
          - TOUFIK
      environment_name:
        type: choice
        description: "Select the environment name"
        options:
          - prod
      resource:
        type: choice
        description: "Select the resources name"
        options:
          - vpc
          - cloud-run
          - cloud-sql
          - monitoring
          - storage
          - run-nextjs
          - nextjs-alb
          - artifact-nextjs
          - mem-store
      tf_function:
        type: choice
        description: "infrastructure planning / deployment"
        options:
          - plan
          - apply

env:
  TERRAFORM_VERSION: 1.8.5
  TERRAGRUNT_VERSION: v0.59.4
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  CHANNEL: "iac-deployments"

jobs:
  terragrunt-apply:
    runs-on: ubuntu-latest
    steps:

      - name: Set resource_env based on selected brand
        id: set-env
        run: |
          case "${{ inputs.brand_name }}" in
            "TOUFIK")
              echo "resource_env=toufik" >> $GITHUB_ENV
              ;;
            *)
              echo "resource_env=unknown" >> $GITHUB_ENV
              ;;
          esac

      # - name: Enforce Branch Rules
      #   run: |
      #     # PROD Environment Rules
      #     if [[ "${{ inputs.environment_name }}" == "prod" && "${{ inputs.tf_function }}" == "apply" ]]; then
      #       if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
      #         echo "Error: Only 'main' branch can apply to the prod environment."
      #         exit 1
      #       fi
      #     fi

      #     # STAGE Environment Rules
      #     if [[ "${{ inputs.environment_name }}" == "stage" && "${{ inputs.tf_function }}" == "apply" ]]; then
      #       if [[ "${{ github.ref }}" != "refs/heads/develop" && ! "${{ github.ref }}" =~ ^refs/heads/feature/.+ ]]; then
      #         echo "Error: Only 'develop' and 'feature/*' branches can apply to the stage environment."
      #         exit 1
      #       fi
      #     fi 

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set tg path and install checkov
        id: set-folder
        run: |
          echo "tg_dir=terragrunt/${{ env.resource_env }}-gcp/${{ inputs.environment_name }}/${{ inputs.resource }}" >> $GITHUB_ENV
          pip3 install checkov
          pip3 install -U checkov
          checkov --version

      # - name: Security Check with tfsec
      #   uses: aquasecurity/tfsec-action@v1.0.0
      #   with:
      #     tfsec_flags: "--concise-output"
      #   continue-on-error: true

      - name: Terraform Plan
        # if: inputs.tf_function == 'plan'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TERRAFORM_VERSION }}
          tg_version: ${{ env.TERRAGRUNT_VERSION }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'plan -out=tfplan.binary'
        id: terraform-plan

      - name: Find Terraform Plan 
        run: |
          sudo find ${{github.workspace}} -type f -name "plan.json"
          TFPLAN_PATH=$(sudo find ${{github.workspace}} -type f -name "plan.json" | head -n 1) >> $GITHUB_ENV
          ls  -ltra ${{env.TFPLAN_PATH}} 
          DIR_PATH=$(dirname "$TFPLAN_PATH") >> $GITHUB_ENV
          echo $DIR_PATH

      - name: Checkov on Plan JSON
        continue-on-error: true
        working-directory: ${{github.workspace}}/terragrunt/${{ env.resource_env }}-gcp/
        run: |
          export CHECKOV_OUTPUT_CODE_LINE_LIMIT=1500
          checkov -f plan.json  --framework terraform_plan --output-file-path plan 

      - name: Parse Test Results
        working-directory: ${{github.workspace}}/terragrunt/${{ env.resource_env }}-gcp/
        run: |
          sudo find ${{github.workspace}} -name "plan"
          TEST_RESULT=$(grep -oP "Passed checks: \K.*" plan/results_cli.txt || echo "N/A")
          echo "test_result=$TEST_RESULT" >> $GITHUB_ENV  
          echo ${{env.test_result}}  


    #   - name: Check for Destroy in Plan
    #     if: inputs.environment_name == 'prod' && steps.terraform-plan.outputs.stdout.contains('destroy')
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     run: |
    #       echo "Resources in destroy detected, sending Slack alert"
    #       curl -X POST -H 'Content-type: application/json' --data \
    #       '{"text":"Terraform plan detected resources in destroy for prod environment. Please review the plan."}' \
    #       $SLACK_WEBHOOK_URL

      - name: Deploy
        # if: inputs.tf_function == 'apply' && github.ref == 'refs/heads/main' && inputs.environment_name == 'prod'
        if: inputs.tf_function == 'apply'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TERRAFORM_VERSION }}
          tg_version: ${{ env.TERRAGRUNT_VERSION }}
          tg_dir: ${{ env.tg_dir }} # terragrunt/${{ env.resource_env }}_terragrunt/${{ env.resource_env }}/${{ inputs.environment_name }}/${{ inputs.resource }}
          tg_command: 'apply'

      - name: Slack Notification of Checkov and Deployment
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ env.SLACK_BOT_TOKEN}}
          payload: |
            {
              "channel": "${{ env.CHANNEL}}",
              "text": "ðŸš€ *Deployment Report for ${{ github.repository }}*",
              "attachments": [
                {
                  "color": "#e01e5a",
                  "fields": [
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Brand Name",
                      "value": "${{ inputs.brand_name }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ inputs.environment_name }}",
                      "short": true
                    },
                    {
                      "title": "Resource",
                      "value": "${{ inputs.resource }}",
                      "short": true
                    },
                    {
                      "title": "Operation",
                      "value": "${{ inputs.tf_function }}",
                      "short": true
                    },
                    {
                      "title": "Checkov Terraform Plan Result",
                      "value": "Passed tests: ${{ env.test_result }}",
                      "short": false
                    }
                  ]
                }
              ]
            }      